{"version":3,"file":"vanilla-click-outside.js","sources":["../src/index.ts","../src/utils.ts"],"sourcesContent":["import { isNodeList, isHTMLCollection, isHTMLElement } from './utils'\n\nexport type OCOSelector = HTMLElement | HTMLCollection | NodeList\nexport type OCOOptions = {\n  removeListener: boolean\n  verbose: boolean\n}\nexport type OCOCallback = (t: EventTarget | boolean | string | null) => {}\n\nconst defaultOptions: OCOOptions = {\n  removeListener: true,\n  verbose: false,\n}\n\n/**\n * A simple easy to script to determine whenever the user clicks outside a selected element.\n *\n * @param {OCOSelector} selector Element to exclude\n * @param {OCOCallback} callback Do something on click outside\n */\nexport default function VanillaClickOutside(\n  selector: OCOSelector,\n  options: OCOOptions,\n  callback: OCOCallback\n): EventListener {\n  const newOptions = { ...defaultOptions, ...options }\n\n  const listener = (event: Event) => {\n    if (isNodeList(selector) || isHTMLCollection(selector)) {\n      if (\n        Array.from(<HTMLCollection | NodeList>selector) // prettier-ignore\n          .some(s => s.contains(<Node>event.target))\n      ) {\n        if (newOptions.verbose) {\n          return callback('HTMLCollection | NodeList')\n        }\n        return\n      }\n    } else if (isHTMLElement(selector)) {\n      if ((selector as HTMLElement).contains(<Node>event.target)) {\n        if (newOptions.verbose) {\n          return callback('HTMLElement')\n        }\n        return\n      }\n    } else {\n      console.warn('Undefined type of', selector)\n      if (newOptions.verbose) {\n        return callback(null)\n      }\n      return\n    }\n\n    if (newOptions.removeListener) {\n      document.removeEventListener('click', listener)\n    }\n    if (newOptions.verbose) {\n      return callback(event.target)\n    }\n    return callback(true)\n  }\n\n  document.addEventListener('click', listener)\n  return listener // allow deleting from outside\n}\n","export function isNodeList(s: any): boolean {\n  return NodeList.prototype.isPrototypeOf(s)\n}\n\nexport function isHTMLCollection(s: any): boolean {\n  return HTMLCollection.prototype.isPrototypeOf(s)\n}\n\nexport function isHTMLElement(s: any): boolean {\n  return HTMLElement.prototype.isPrototypeOf(s)\n}\n"],"names":["defaultOptions","removeListener","verbose","selector","options","callback","newOptions","listener","event","s","NodeList","prototype","isPrototypeOf","isNodeList","HTMLCollection","isHTMLCollection","Array","from","some","contains","target","HTMLElement","isHTMLElement","console","warn","document","removeEventListener","addEventListener"],"mappings":";;;;;;;;;yMASA,MAAMA,EAA6B,CACjCC,gBAAgB,EAChBC,SAAS,mBAUTC,EACAC,EACAC,GAEA,MAAMC,mBAAkBN,EAAmBI,GAErCG,EAAYC,IAChB,YC5BuBC,GACzB,OAAOC,SAASC,UAAUC,cAAcH,GD2BlCI,CAAWV,aCxBcM,GAC/B,OAAOK,eAAeH,UAAUC,cAAcH,GDuBhBM,CAAiBZ,IAC3C,GACEa,MAAMC,KAAgCd,GACnCe,KAAKT,GAAKA,EAAEU,SAAeX,EAAMY,SAEpC,OAAId,EAAWJ,QACNG,EAAS,kCAElB,MAEG,CAAA,aC9BmBI,GAC5B,OAAOY,YAAYV,UAAUC,cAAcH,GD6B9Ba,CAAcnB,GASvB,OADAoB,QAAQC,KAAK,oBAAqBrB,GAC9BG,EAAWJ,QACNG,EAAS,WAElB,EAXA,GAAKF,EAAyBgB,SAAeX,EAAMY,QACjD,OAAId,EAAWJ,QACNG,EAAS,oBAElB,EAaJ,OAHIC,EAAWL,gBACbwB,SAASC,oBAAoB,QAASnB,GAEpCD,EAAWJ,QACNG,EAASG,EAAMY,QAEjBf,GAAS,IAIlB,OADAoB,SAASE,iBAAiB,QAASpB,GAC5BA"}